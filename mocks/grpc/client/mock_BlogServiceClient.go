// Code generated by mockery. DO NOT EDIT.

package clientprotomock

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/grpc-mongo-go/gen/proto"
)

// ClientProtoMock is an autogenerated mock type for the BlogServiceClient type
type ClientProtoMock struct {
	mock.Mock
}

type ClientProtoMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientProtoMock) EXPECT() *ClientProtoMock_Expecter {
	return &ClientProtoMock_Expecter{mock: &_m.Mock}
}

// CreateBlog provides a mock function with given fields: ctx, in, opts
func (_m *ClientProtoMock) CreateBlog(ctx context.Context, in *proto.Blog, opts ...grpc.CallOption) (*proto.BlogId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 *proto.BlogId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blog, ...grpc.CallOption) (*proto.BlogId, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blog, ...grpc.CallOption) *proto.BlogId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.BlogId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Blog, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProtoMock_CreateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlog'
type ClientProtoMock_CreateBlog_Call struct {
	*mock.Call
}

// CreateBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Blog
//   - opts ...grpc.CallOption
func (_e *ClientProtoMock_Expecter) CreateBlog(ctx interface{}, in interface{}, opts ...interface{}) *ClientProtoMock_CreateBlog_Call {
	return &ClientProtoMock_CreateBlog_Call{Call: _e.mock.On("CreateBlog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ClientProtoMock_CreateBlog_Call) Run(run func(ctx context.Context, in *proto.Blog, opts ...grpc.CallOption)) *ClientProtoMock_CreateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Blog), variadicArgs...)
	})
	return _c
}

func (_c *ClientProtoMock_CreateBlog_Call) Return(_a0 *proto.BlogId, _a1 error) *ClientProtoMock_CreateBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProtoMock_CreateBlog_Call) RunAndReturn(run func(context.Context, *proto.Blog, ...grpc.CallOption) (*proto.BlogId, error)) *ClientProtoMock_CreateBlog_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlog provides a mock function with given fields: ctx, in, opts
func (_m *ClientProtoMock) DeleteBlog(ctx context.Context, in *proto.BlogId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BlogId, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BlogId, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.BlogId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProtoMock_DeleteBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlog'
type ClientProtoMock_DeleteBlog_Call struct {
	*mock.Call
}

// DeleteBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.BlogId
//   - opts ...grpc.CallOption
func (_e *ClientProtoMock_Expecter) DeleteBlog(ctx interface{}, in interface{}, opts ...interface{}) *ClientProtoMock_DeleteBlog_Call {
	return &ClientProtoMock_DeleteBlog_Call{Call: _e.mock.On("DeleteBlog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ClientProtoMock_DeleteBlog_Call) Run(run func(ctx context.Context, in *proto.BlogId, opts ...grpc.CallOption)) *ClientProtoMock_DeleteBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.BlogId), variadicArgs...)
	})
	return _c
}

func (_c *ClientProtoMock_DeleteBlog_Call) Return(_a0 *emptypb.Empty, _a1 error) *ClientProtoMock_DeleteBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProtoMock_DeleteBlog_Call) RunAndReturn(run func(context.Context, *proto.BlogId, ...grpc.CallOption) (*emptypb.Empty, error)) *ClientProtoMock_DeleteBlog_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlogs provides a mock function with given fields: ctx, in, opts
func (_m *ClientProtoMock) ListBlogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (proto.BlogService_ListBlogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBlogs")
	}

	var r0 proto.BlogService_ListBlogsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (proto.BlogService_ListBlogsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) proto.BlogService_ListBlogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.BlogService_ListBlogsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProtoMock_ListBlogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlogs'
type ClientProtoMock_ListBlogs_Call struct {
	*mock.Call
}

// ListBlogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *emptypb.Empty
//   - opts ...grpc.CallOption
func (_e *ClientProtoMock_Expecter) ListBlogs(ctx interface{}, in interface{}, opts ...interface{}) *ClientProtoMock_ListBlogs_Call {
	return &ClientProtoMock_ListBlogs_Call{Call: _e.mock.On("ListBlogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ClientProtoMock_ListBlogs_Call) Run(run func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption)) *ClientProtoMock_ListBlogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*emptypb.Empty), variadicArgs...)
	})
	return _c
}

func (_c *ClientProtoMock_ListBlogs_Call) Return(_a0 proto.BlogService_ListBlogsClient, _a1 error) *ClientProtoMock_ListBlogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProtoMock_ListBlogs_Call) RunAndReturn(run func(context.Context, *emptypb.Empty, ...grpc.CallOption) (proto.BlogService_ListBlogsClient, error)) *ClientProtoMock_ListBlogs_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBlog provides a mock function with given fields: ctx, in, opts
func (_m *ClientProtoMock) ReadBlog(ctx context.Context, in *proto.BlogId, opts ...grpc.CallOption) (*proto.Blog, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReadBlog")
	}

	var r0 *proto.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BlogId, ...grpc.CallOption) (*proto.Blog, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.BlogId, ...grpc.CallOption) *proto.Blog); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.BlogId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProtoMock_ReadBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBlog'
type ClientProtoMock_ReadBlog_Call struct {
	*mock.Call
}

// ReadBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.BlogId
//   - opts ...grpc.CallOption
func (_e *ClientProtoMock_Expecter) ReadBlog(ctx interface{}, in interface{}, opts ...interface{}) *ClientProtoMock_ReadBlog_Call {
	return &ClientProtoMock_ReadBlog_Call{Call: _e.mock.On("ReadBlog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ClientProtoMock_ReadBlog_Call) Run(run func(ctx context.Context, in *proto.BlogId, opts ...grpc.CallOption)) *ClientProtoMock_ReadBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.BlogId), variadicArgs...)
	})
	return _c
}

func (_c *ClientProtoMock_ReadBlog_Call) Return(_a0 *proto.Blog, _a1 error) *ClientProtoMock_ReadBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProtoMock_ReadBlog_Call) RunAndReturn(run func(context.Context, *proto.BlogId, ...grpc.CallOption) (*proto.Blog, error)) *ClientProtoMock_ReadBlog_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBlog provides a mock function with given fields: ctx, in, opts
func (_m *ClientProtoMock) UpdateBlog(ctx context.Context, in *proto.Blog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blog, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Blog, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Blog, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProtoMock_UpdateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlog'
type ClientProtoMock_UpdateBlog_Call struct {
	*mock.Call
}

// UpdateBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Blog
//   - opts ...grpc.CallOption
func (_e *ClientProtoMock_Expecter) UpdateBlog(ctx interface{}, in interface{}, opts ...interface{}) *ClientProtoMock_UpdateBlog_Call {
	return &ClientProtoMock_UpdateBlog_Call{Call: _e.mock.On("UpdateBlog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ClientProtoMock_UpdateBlog_Call) Run(run func(ctx context.Context, in *proto.Blog, opts ...grpc.CallOption)) *ClientProtoMock_UpdateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Blog), variadicArgs...)
	})
	return _c
}

func (_c *ClientProtoMock_UpdateBlog_Call) Return(_a0 *emptypb.Empty, _a1 error) *ClientProtoMock_UpdateBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProtoMock_UpdateBlog_Call) RunAndReturn(run func(context.Context, *proto.Blog, ...grpc.CallOption) (*emptypb.Empty, error)) *ClientProtoMock_UpdateBlog_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientProtoMock creates a new instance of ClientProtoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientProtoMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientProtoMock {
	mock := &ClientProtoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
